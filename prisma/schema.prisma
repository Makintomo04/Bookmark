// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   
  username      String?   @unique @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  hashedPassword String?
  bio           String?
  image         String?
  banner         String?
  favColour     String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favGenres String[] @db.String
  favouriteIds String[] @db.String
  books Book[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String  
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  title String
  author String
  description String?
  coverImage String
  cardColour String?
  status Status @default(NOT_STARTED)
  genre String?
  rating Float?
  notes Note[]
  quotes String[]
  pages Int
  currentPage Int? @default(0)
  createdAt DateTime @default(now())
  startedAt DateTime?
  completedAt DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Note {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  bookId String @db.ObjectId
  title String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum Status {
  STARTED
  NOT_STARTED
  COMPLETED
}
